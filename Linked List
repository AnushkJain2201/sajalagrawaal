package com.sajal;

 class LL {
     Node head;
     private int size;

     LL(){
         this.size=0;
     }
     class Node{
         int data;
         Node next;

         public Node(int data) {
             this.data = data;
             this.next = null;
             size++;
         }
     }
     //add first
     public void addFirst(int data){
         Node newNode = new Node(data);
         if (head==null){
             head = newNode;
             return;
         }
         newNode.next = head;
         head = newNode;
     }
     //add last
     public void addLast(int data){
         Node newNode = new Node(data);
         if (head==null){
             head = newNode;
             return;
         }
         Node currNode = head;
         while (currNode.next != null){
            currNode = currNode.next;
         }
            currNode.next = newNode;
     }
     public void printlist(){
         if (head==null){
             System.out.println("The list is empty");
             return;
         }
         Node currNode = head;
         while (currNode != null){
             System.out.print(currNode.data+ "->");
             currNode = currNode.next;
         }
         System.out.println("Null");
     }
     //delete first
     public void deleteFirst(){
         if (head == null){
             System.out.println("The link is empty, my Friend");
             return;
         }
         size--;
         head = head.next;
     }
     //delete last
     public void deleteLast(){
         if (head==null){
             System.out.println("The link is empty, ðŸ˜Š");
             return;
         }
         size--;
         if (head.next==null){
             head = null;
             return;
         }
         Node secondLast = head;
         Node lastNode = head.next;

         while (lastNode.next != null){
             lastNode = lastNode.next;
             secondLast = secondLast.next;
         }
             secondLast.next = null;
     }
     public int getSize(){
         return size;
     }
     public Node reverseListRecursive(Node head){
         if (head==null || head.next == null){
             return head;
         }

         Node newHead = reverseListRecursive(head.next);

         head.next.next = head;
         head.next = null;
         return newHead;
     }
     public Node removeFromEnd(Node head, int n){
         if(head.next == null) {
             return null;
         }

         //size
         int size = 0;
         Node curr = head;
         while (curr != null){
             curr = curr.next;
             size++;
         }

         //removing the size nth node from last
         if(n == size) {
             return head.next;
         }

         //find the previous node
         int indexToSearch = size-n;
         Node prev = head;
         int i =1;
         while (i < indexToSearch){
             prev = prev.next;
             i++;
         }
         prev.next = prev.next.next;
         return head;
     }



    public static void main(String[] args) {
	     LL list = new LL();
         list.addFirst(45);
         list.addFirst(21);
         list.addLast(54);
         list.addLast(6);
         list.addLast(45);

         list.head = list.removeFromEnd(list.head, 45);
         list.printlist();
    }
 }
